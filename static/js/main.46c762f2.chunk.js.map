{"version":3,"sources":["Queries.ts","Components/SearchBox/API.ts","Components/SearchBox/SearchBox.tsx","App.tsx","theme.ts","index.tsx"],"names":["GET_CITY_BY_NAME","gql","axios","Axios","baseURL","searchCities","term","get","params","locale","types","then","response","data","JSON","parse","results","forEach","item","find","r","name","push","country_name","SearchBox","onSelected","defaultValue","useState","open","setOpen","options","setOptions","loading","setLoading","useEffect","a","map","record","Card","style","padding","width","Grid","container","md","Autocomplete","onOpen","onClose","isOptionEqualToValue","option","value","getOptionLabel","onChange","_","renderInput","TextField","label","event","target","InputProps","endAdornment","CircularProgress","color","size","weatherClient","ApolloClient","uri","cache","InMemoryCache","App","cityName","setCityName","result","setResult","useQuery","client","variables","onCompleted","getCityByName","Container","maxWidth","marginTop","justifyContent","alignItems","weather","summary","description","theme","createTheme","palette","primary","main","secondary","error","red","A400","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"gRAEaA,EAAmBC,YAAH,2S,8ECKvBC,EAAQ,I,OAAIC,OAAM,CACtBC,QAAS,0CAEEC,EAAe,SAACC,GAAD,OAC1BJ,EACGK,IAAY,WAAY,CACvBC,OAAQ,CAAEC,OAAQ,KAAMC,MAAO,CAAC,QAASJ,UAE1CK,MAAK,SAACC,GACL,IAAMC,EAAOC,KAAKC,MAAMH,EAASC,MAC3BG,EAAyB,GAU/B,OATAH,EAAKI,SAAQ,SAACC,GACRF,EAAQG,MAAK,SAACC,GAAD,OAAOA,EAAEC,OAASH,EAAKG,SAGxCL,EAAQM,KAAK,CACXD,KAAMH,EAAKG,KACXE,aAAcL,EAAKK,kBAGhBP,M,OC4DEQ,EA3EqB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aACjD,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAAmB,IAAjD,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAkB,GAAhD,mBAAOK,EAAP,KAAgBC,EAAhB,KAkBA,OAhBAC,qBAAU,WACHF,GAGL,sBAAC,4BAAAG,EAAA,sEACuB9B,EAAaqB,GADpC,OACOV,EADP,OAECe,EAAWf,EAAQoB,KAAI,SAACC,GAAD,OAAYA,EAAOhB,SAC1CY,GAAW,GAHZ,0CAAD,KAKC,CAACD,IAEJE,qBAAU,WACHN,GACHG,EAAW,MAEZ,CAACH,IAEF,cAACU,EAAA,EAAD,CAAMC,MAAO,CAAEC,QAAS,GAAIC,MAAO,QAAnC,SACE,cAACC,EAAA,EAAD,CAAMC,WAAS,EAAf,SACE,cAACD,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CACEjB,KAAMA,EACNkB,OAAQ,WACNjB,GAAQ,IAEVkB,QAAS,WACPlB,GAAQ,IAEVmB,qBAAsB,SAACC,EAAgBC,GAAjB,OAA2BD,IAAWC,GAC5DC,eAAgB,SAACF,GAAD,OAAoBA,GACpCnB,QAASA,EACTE,QAASA,EACTN,aAAcA,EACd0B,SAAU,SAACC,EAAGH,GACNA,GAAOzB,EAAWyB,IAE1BI,YAAa,SAAC9C,GACZ,OACE,cAAC+C,EAAA,EAAD,2BACM/C,GADN,IAEEgD,MAAM,yBACNJ,SAAQ,uCAAE,WAAOK,GAAP,iBAAAtB,EAAA,6DACF7B,EAAOmD,EAAMC,OAAOR,MAC1BjB,GAAW,GAFH,SAGc5B,EAClBC,GAAcoB,GAJV,OAGFV,EAHE,OAMRe,EAAWf,EAAQoB,KAAI,SAACC,GAAD,OAAYA,EAAOhB,SAC1CY,GAAW,GAPH,2CAAF,sDASR0B,WAAU,2BACLnD,EAAOmD,YADF,IAERC,aACE,eAAC,WAAD,WACG5B,EACC,cAAC6B,EAAA,EAAD,CAAkBC,MAAM,UAAUC,KAAM,KACtC,KACHvD,EAAOmD,WAAWC,+BCnErCI,EAAgB,IAAIC,IAAa,CACrCC,IAAK,6CACLC,MAAO,IAAIC,MAcE,SAASC,IACtB,MAAgC1C,mBAAiB,UAAjD,mBAAO2C,EAAP,KAAiBC,EAAjB,KACA,EAA4B5C,qBAA5B,mBAAO6C,EAAP,KAAeC,EAAf,KACQzC,EAAY0C,YAAS1E,EAAkB,CAC7C2E,OAAQX,EACRY,UAAW,CACTvD,KAAMiD,GAERO,YAAa,SAAChE,GACZ4D,EAAU5D,EAAKiE,kBANX9C,QASR,OACE,cAAC+C,EAAA,EAAD,CAAWC,SAAS,KAAKzC,MAAO,CAAE0C,UAAW,IAA7C,SACE,eAACvC,EAAA,EAAD,CAAMC,WAAS,EAACuC,eAAe,SAASC,WAAW,SAAnD,UACE,cAACzC,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,GAAI,EAAf,SACE,cAAC,EAAD,CAAWlB,aAAc4C,EAAU7C,WAAY8C,MAEhDvC,GACC,cAACU,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,GAAI,EAAf,yBAIAZ,KAAawC,GACb,cAAC9B,EAAA,EAAD,CAAMxB,MAAI,EAAC0B,GAAI,EAAf,SACG4B,EAAOY,QAAQC,QAAQC,mB,qBC9BrBC,EAdDC,YAAY,CACxBC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAERE,MAAO,CACLF,KAAMG,IAAIC,SCNhBC,IAASC,OACP,eAACC,EAAA,EAAD,CAAeX,MAAOA,EAAtB,UACE,cAACY,EAAA,EAAD,IACA,cAAC9B,EAAD,OAEF+B,SAASC,cAAc,Y","file":"static/js/main.46c762f2.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\r\n\r\nexport const GET_CITY_BY_NAME = gql`\r\n  query GetCityByName($name: String!) {\r\n    getCityByName(name: $name) {\r\n      id\r\n      name\r\n      coord {\r\n        lon\r\n        lat\r\n      }\r\n      weather {\r\n        summary {\r\n          title\r\n          description\r\n          icon\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { Axios } from \"axios\";\r\n\r\nexport interface ICityRecord {\r\n  name: string;\r\n  country_name: string;\r\n}\r\n\r\nconst axios = new Axios({\r\n  baseURL: \"http://autocomplete.travelpayouts.com\",\r\n});\r\nexport const searchCities = (term: string): Promise<ICityRecord[]> =>\r\n  axios\r\n    .get<string>(\"/places2\", {\r\n      params: { locale: \"en\", types: [\"city\"], term },\r\n    })\r\n    .then((response) => {\r\n      const data = JSON.parse(response.data);\r\n      const results: ICityRecord[] = [];\r\n      data.forEach((item: { name: string; country_name: string }) => {\r\n        if (results.find((r) => r.name === item.name)) {\r\n          return;\r\n        }\r\n        results.push({\r\n          name: item.name,\r\n          country_name: item.country_name,\r\n        });\r\n      });\r\n      return results;\r\n    });\r\n","import { Card, Grid } from \"@mui/material\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport react, { Fragment, useEffect, useState } from \"react\";\r\nimport { searchCities } from \"./API\";\r\n\r\ninterface IProps {\r\n  onSelected: (value: string) => void;\r\n  defaultValue: string;\r\n}\r\n\r\nconst SearchBox: React.FC<IProps> = ({ onSelected, defaultValue }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [options, setOptions] = useState<string[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      return;\r\n    }\r\n    (async () => {\r\n      const results = await searchCities(defaultValue);\r\n      setOptions(results.map((record) => record.name));\r\n      setLoading(false);\r\n    })();\r\n  }, [loading]);\r\n\r\n  useEffect(() => {\r\n    if (!open) {\r\n      setOptions([]);\r\n    }\r\n  }, [open]);\r\n  return (\r\n    <Card style={{ padding: 10, width: \"100%\" }}>\r\n      <Grid container>\r\n        <Grid item md={12}>\r\n          <Autocomplete\r\n            open={open}\r\n            onOpen={() => {\r\n              setOpen(true);\r\n            }}\r\n            onClose={() => {\r\n              setOpen(false);\r\n            }}\r\n            isOptionEqualToValue={(option: string, value) => option === value}\r\n            getOptionLabel={(option: string) => option}\r\n            options={options}\r\n            loading={loading}\r\n            defaultValue={defaultValue}\r\n            onChange={(_, value) => {\r\n              if (!!value) onSelected(value);\r\n            }}\r\n            renderInput={(params) => {\r\n              return (\r\n                <TextField\r\n                  {...params}\r\n                  label=\"Search City or Country\"\r\n                  onChange={async (event) => {\r\n                    const term = event.target.value;\r\n                    setLoading(true);\r\n                    const results = await searchCities(\r\n                      !!term ? term : defaultValue\r\n                    );\r\n                    setOptions(results.map((record) => record.name));\r\n                    setLoading(false);\r\n                  }}\r\n                  InputProps={{\r\n                    ...params.InputProps,\r\n                    endAdornment: (\r\n                      <Fragment>\r\n                        {loading ? (\r\n                          <CircularProgress color=\"inherit\" size={20} />\r\n                        ) : null}\r\n                        {params.InputProps.endAdornment}\r\n                      </Fragment>\r\n                    ),\r\n                  }}\r\n                />\r\n              );\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Card>\r\n  );\r\n};\r\nexport default SearchBox;\r\n","import react, { useEffect, useState } from \"react\";\nimport Container from \"@mui/material/Container\";\nimport { ApolloClient, InMemoryCache, useQuery } from \"@apollo/client\";\nimport { GET_CITY_BY_NAME } from \"./Queries\";\nimport { Grid } from \"@mui/material\";\nimport SearchBox from \"./Components/SearchBox/SearchBox\";\n\nconst weatherClient = new ApolloClient({\n  uri: \"https://graphql-weather-api.herokuapp.com/\",\n  cache: new InMemoryCache(),\n});\n\ninterface IWeatherData {\n  id: string;\n  name: string;\n  weather: {\n    summary: {\n      description: string;\n      title: string;\n      icon: string;\n    };\n  };\n}\nexport default function App() {\n  const [cityName, setCityName] = useState<string>(\"london\");\n  const [result, setResult] = useState<IWeatherData>();\n  const { loading } = useQuery(GET_CITY_BY_NAME, {\n    client: weatherClient,\n    variables: {\n      name: cityName,\n    },\n    onCompleted: (data) => {\n      setResult(data.getCityByName);\n    },\n  });\n  return (\n    <Container maxWidth=\"lg\" style={{ marginTop: 10 }}>\n      <Grid container justifyContent=\"center\" alignItems=\"center\">\n        <Grid item md={8}>\n          <SearchBox defaultValue={cityName} onSelected={setCityName} />\n        </Grid>\n        {loading && (\n          <Grid item md={8}>\n            loading...\n          </Grid>\n        )}\n        {!loading && !!result && (\n          <Grid item md={8}>\n            {result.weather.summary.description}\n          </Grid>\n        )}\n      </Grid>\n    </Container>\n  );\n}\n","import { createTheme } from '@mui/material/styles';\nimport { red } from '@mui/material/colors';\n\n// A custom theme for this app\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n  },\n});\n\nexport default theme;\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { ThemeProvider } from \"@mui/material/styles\";\nimport App from \"./App\";\nimport theme from \"./theme\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}