{"version":3,"sources":["Queries.ts","App.tsx","theme.ts","index.tsx"],"names":["GET_CITY_BY_NAME","gql","App","useQuery","data","loading","Container","maxWidth","result","getCityByName","id","name","onClick","navigator","console","log","geolocation","getCurrentPosition","position","coords","theme","createTheme","palette","primary","main","secondary","error","red","A400","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ThemeProvider","CssBaseline","ApolloProvider","document","querySelector"],"mappings":"kPAEaA,EAAmBC,YAAH,yQ,OCGd,SAASC,IACtB,MAA0BC,YAASH,GAA3BI,EAAR,EAAQA,KAYR,GAZA,EAAcC,QAYD,OAAO,cAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,0BACpB,IAAMC,EAASJ,EAAKK,cAEpB,OACE,eAACH,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,qCAAQC,EAAOE,MACf,uCAAUF,EAAOG,QACjB,wBAAQC,QAjBZ,WACQ,gBAAiBC,WAIvBC,QAAQC,IAAI,SACZF,UAAUG,YAAYC,oBAAmB,SAAUC,GACjDJ,QAAQC,IAAIG,EAASC,YALrBL,QAAQC,IAAI,sBAeZ,6C,oBCPSK,EAdDC,YAAY,CACxBC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAERE,MAAO,CACLF,KAAMG,IAAIC,S,2BCNVC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,6CACLC,MAAO,IAAIC,MAEbC,IAASC,OACP,eAACC,EAAA,EAAD,CAAehB,MAAOA,EAAtB,UACE,cAACiB,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAgBT,OAAQA,EAAxB,SACE,cAAC3B,EAAD,SAGJqC,SAASC,cAAc,Y","file":"static/js/main.224ae694.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\r\n\r\nexport const GET_CITY_BY_NAME = gql`\r\n  {\r\n    getCityByName(name: \"rasht\") {\r\n      id\r\n      name\r\n      coord {\r\n        lon\r\n        lat\r\n      }\r\n      weather {\r\n        summary {\r\n          title\r\n          description\r\n          icon\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import react, { useEffect } from \"react\";\nimport Container from \"@mui/material/Container\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_CITY_BY_NAME } from \"./Queries\";\n\nexport default function App() {\n  const { data, loading } = useQuery(GET_CITY_BY_NAME);\n\n  function loadMyLocation(): void {\n    if (!(\"geolocation\" in navigator)) {\n      console.log(\"geo not supported\");\n      return;\n    }\n    console.log(\"here!\");\n    navigator.geolocation.getCurrentPosition(function (position) {\n      console.log(position.coords);\n    });\n  }\n  if (loading) return <Container maxWidth=\"lg\">it's loading</Container>;\n  const result = data.getCityByName;\n\n  return (\n    <Container maxWidth=\"lg\">\n      <p>id: {result.id}</p>\n      <p>name: {result.name}</p>\n      <button onClick={loadMyLocation}>load my location information</button>\n    </Container>\n  );\n}\n","import { createTheme } from '@mui/material/styles';\nimport { red } from '@mui/material/colors';\n\n// A custom theme for this app\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n  },\n});\n\nexport default theme;\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { ThemeProvider } from \"@mui/material/styles\";\nimport App from \"./App\";\nimport theme from \"./theme\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nconst client = new ApolloClient({\n  uri: \"https://graphql-weather-api.herokuapp.com/\",\n  cache: new InMemoryCache(),\n});\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </ThemeProvider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}